{"version":3,"sources":["modules/redditList/redditItem/RedditItem.jsx","modules/redditList/RedditList.jsx","modules/toolBox/ToolBox.jsx","modules/header/Header.jsx","modules/errorPanel/ErrorPanel.jsx","modules/home/Home.jsx","routes.js","index.js"],"names":["RedditItem","props","num","title","score","url","author","numComments","react_default","a","createElement","className","toFixed","href","target","rel","RedditList","subredditsList","subredditTitle","length","map","subReddit","index","RedditItem_RedditItem","key","username","concat","item","ToolBox","sortBy","hasTimeInterval","timeInterval","changeSort","changeTime","searchQuery","search","type","value","onKeyPress","placeholder","onChange","Header","ErrorPanel","error","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","subreddits","handleSortChange","bind","assertThisInitialized","handleTimeIntervalChange","handleSearch","getSubreddit","sortByListings","timeIntervalProperty","query","setState","axios","method","params","data","reddit","subreddit","event","_this2","charCode","preventDefault","resetSubreddit","_this3","_this4","targetValue","_this$state2","Header_Header","ErrorPanel_ErrorPanel","RedditList_RedditList","Component","Routes","Switch","Route","exact","component","path","ReactDOM","render","HashRouter","routes","document","getElementById"],"mappings":"waAKe,SAASA,EAAWC,GAAO,IAGlBC,EAFZC,EAA2CF,EAA3CE,MAAOC,EAAoCH,EAApCG,MAAOC,EAA6BJ,EAA7BI,IAAKC,EAAwBL,EAAxBK,OAAQC,EAAgBN,EAAhBM,YAMnC,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACVH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,aAXRR,EAW0BE,GAV7B,KAAOF,EAAM,KAAMU,QAAQ,GAAK,IAAMV,MAcvCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAb,cACgBL,GAEhBE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KACIG,KAAMR,EACNS,OAAO,SACPC,IAAI,uBAEHZ,IAITK,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BACRJ,EADL,uBC9BT,SAASS,EAAWf,GAAO,IAC9BgB,EAAmChB,EAAnCgB,eAAgBC,EAAmBjB,EAAnBiB,eAExB,OAAID,EAC8B,IAA1BA,EAAeE,OAEXX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAAb,wCAOJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BACTM,EAAeG,IAAI,SAACC,EAAWC,GAC5B,OACId,EAAAC,EAAAC,cAACa,EAAD,CACIC,IAAKF,EACLnB,MAAOkB,EAAUlB,MACjBE,IAAKgB,EAAUhB,IACfE,YAAac,EAAUd,YACvBD,OAAQe,EAAUf,OAAOmB,SACzBrB,MAAOiB,EAAUjB,WAMjCI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAb,6CAC+C,IAC3CH,EAAAC,EAAAC,cAAA,KACIG,KAAI,2BAAAa,OAA6BR,GACjCJ,OAAO,SACPC,IAAI,uBAHR,KAKOG,GACF,IART,8BAgBRV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BACT,CAAC,EAAG,EAAG,GAAGS,IAAI,SAACO,EAAML,GAClB,OACId,EAAAC,EAAAC,cAAA,MAAIc,IAAKF,EAAOX,UAAU,6BACtBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CCrD5B,SAASiB,EAAQ3B,GAAO,IAE/B4B,EAOA5B,EAPA4B,OACAC,EAMA7B,EANA6B,gBACAC,EAKA9B,EALA8B,aACAC,EAIA/B,EAJA+B,WACAC,EAGAhC,EAHAgC,WACAC,EAEAjC,EAFAiC,YACAC,EACAlC,EADAkC,OAGJ,OACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,kBACVyB,KAAK,OACLC,MAAOH,EACPI,WAAYH,EACZI,YAAY,uBAGhB/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,UACI2B,MAAOR,EACPW,SAAUR,EACVrB,UAAU,iBAEVH,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,OAAd,OACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,OAAd,OACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,iBAAd,iBACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,OAAd,OACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,UAAd,WAGHP,GACGtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,UACI2B,MAAON,EACPS,SAAUP,EACVtB,UAAU,iBAEVH,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,aACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,OAAd,iBACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,aACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,SAAd,cACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,QAAd,aACA7B,EAAAC,EAAAC,cAAA,UAAQ2B,MAAM,OAAd,0BCjDjB,SAASI,EAAOxC,GAAO,IAC1BiB,EAAmBjB,EAAnBiB,eAER,OACIV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,UADJ,KACqD,IACjDH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAhB,YAEJH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KACIG,KAAI,2BAAAa,OAA6BR,GACjCJ,OAAO,SACPC,IAAI,uBAHR,KAKOG,WCfR,SAASwB,EAAWzC,GAAO,IAC9B0C,EAAU1C,EAAV0C,MAER,OACInC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAIiC,uBCyKbC,cAxKX,SAAAA,EAAY3C,GAAO,IAAA4C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM/C,KACDmD,MAAQ,CACTC,WAAY,KACZxB,OAAQ,MACRE,aAAc,MACdG,YAAa,aACbJ,iBAAiB,EACjBa,MAAO,MAGXE,EAAKS,iBAAmBT,EAAKS,iBAAiBC,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACxBA,EAAKY,yBAA2BZ,EAAKY,yBAAyBF,KAA9BT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAGhCA,EAAKa,aAAeb,EAAKa,aAAaH,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAfLA,mFAmBfG,KAAKW,6LAYDX,KAAKI,MAJLvB,WACAK,gBACAH,iBACAD,oBAEE8B,YAAoB/B,cACtBgC,EAAuB,GAEvB/B,IACA+B,EAAoB,iBAAAnC,OAAoBK,IAGtC+B,wCAAuC5B,iBAAkB0B,yBAA6BC,iEAE5Fb,KAAKe,SAAS,CACVpB,MAAO,yBAIkBqB,IAAM,CAC3B3D,IAAK,qCACL4D,OAAQ,MACRC,OAAQ,CACJJ,kBAJFT,SAQNL,KAAKe,SAAS,CACVV,WACIA,EAAWc,KAAKA,KAAKC,OAAOC,UAAUT,uDAG9CZ,KAAKe,SAAS,CACVpB,MACI,yNASZK,KAAKe,SAAS,CAAEV,WAAY,4CAOnBiB,GAAO,IAAAC,EAAAvB,KAEO,KAAnBsB,EAAME,UAENF,EAAMG,iBAGa,KAAnBH,EAAME,UAENxB,KAAKe,SAAS,CAAE7B,YAAaoC,EAAMxD,OAAOuB,OAAS,WAC/CkC,EAAKG,iBACLH,EAAKZ,kEASQW,GAAO,IAAAK,EAAA3B,KAC5BA,KAAKe,SAAS,CAAEhC,aAAcuC,EAAMxD,OAAOuB,OAAS,WAChDsC,EAAKD,iBACLC,EAAKhB,0DAQIW,GAAO,IAAAM,EAAA5B,KACd6B,EAAcP,EAAMxD,OAAOuB,MAEb,kBAAhBwC,GAAmD,QAAhBA,EACnC7B,KAAKe,SAAS,CACVjC,iBAAiB,IAGrBkB,KAAKe,SAAS,CACVjC,iBAAiB,IAIzBkB,KAAKe,SACD,CACIlC,OAAQgD,GAEZ,WACID,EAAKF,iBACLE,EAAKjB,kDAKR,IAAAmB,EAQD9B,KAAKI,MANLC,EAFCyB,EAEDzB,WACAnB,EAHC4C,EAGD5C,YACAL,EAJCiD,EAIDjD,OACAE,EALC+C,EAKD/C,aACAD,EANCgD,EAMDhD,gBACAa,EAPCmC,EAODnC,MAGJ,OACInC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACqE,EAAD,CAAQ7D,eAAgBgB,IAExB1B,EAAAC,EAAAC,cAACkB,EAAD,CACIE,gBAAiBA,EACjBE,WAAYgB,KAAKM,iBACjBrB,WAAYe,KAAKS,yBACjBtB,OAAQa,KAAKU,aACb7B,OAAQA,EACRE,aAAcA,IAGjBY,GAASnC,EAAAC,EAAAC,cAACsE,EAAD,CAAYrC,MAAOA,IAE7BnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAACuE,EAAD,CACIhE,eAAgBoC,EAChBnC,eAAgBgB,aAjKrBgD,aCGJC,mLARX,OACE3E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACE5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,OAAK,EAACC,UAAW3C,EAAM4C,KAAK,cAJtBN,6BCWrBO,IAASC,OAAOlF,EAAAC,EAAAC,cARJ,WACX,OACCF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,KACCnF,EAAAC,EAAAC,cAACkF,EAAD,QAKa,MAASC,SAASC,eAAe","file":"static/js/main.ce5051bc.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./RedditItem.scss\";\n\nexport default function RedditItem(props) {\n    const { title, score, url, author, numComments } = props;\n\n    function kFormatter(num) {\n        return num > 999 ? (num / 1000).toFixed(1) + \"k\" : num;\n    }\n\n    return (\n        <li className=\"reddit-item\">\n            <div className=\"reddit-item__container\">\n                <div className=\"row\">\n                    <div className=\"col-2 col-md-1 col-lg-1\">\n                        <div className=\"reddit-item__score-container\">\n                            <div className=\"reddit-item__score\">\n                                <span>{kFormatter(score)}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-10 col-md-11 col-lg-11\">\n                        <p className=\"reddit-item__author\">\n                            Posted by: {author}\n                        </p>\n                        <h3>\n                            <a\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                {title}\n                            </a>\n                        </h3>\n\n                        <p className=\"reddit-item__num-comments\">\n                            {numComments} comments\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </li>\n    );\n}\n\nRedditItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    url: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired,\n    numComments: PropTypes.number.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport RedditItem from \"./redditItem/RedditItem.jsx\";\n\nimport \"./RedditList.scss\";\n\nexport default function RedditList(props) {\n    const { subredditsList, subredditTitle } = props;\n\n    if (subredditsList) {\n        if (subredditsList.length === 0) {\n            return (\n                <div className=\"reddit-list\">\n                    <p className=\"reddit-list__no-result\">\n                        No results found for this category.\n                    </p>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"reddit-list\">\n                    <ul className=\"reddit-list__container\">\n                        {subredditsList.map((subReddit, index) => {\n                            return (\n                                <RedditItem\n                                    key={index}\n                                    title={subReddit.title}\n                                    url={subReddit.url}\n                                    numComments={subReddit.numComments}\n                                    author={subReddit.author.username}\n                                    score={subReddit.score}\n                                />\n                            );\n                        })}\n                    </ul>\n\n                    <p className=\"reddit-list__footer\">\n                        Only showing 50 results at most. Visit the{\" \"}\n                        <a\n                            href={`http://www.reddit.com/r/${subredditTitle}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            r/{subredditTitle}\n                        </a>{\" \"}\n                        page to continue reading!\n                    </p>\n                </div>\n            );\n        }\n    } else {\n        return (\n            <ul className=\"reddit-list__container\">\n                {[1, 2, 3].map((item, index) => {\n                    return (\n                        <li key={index} className=\"reddit-list__item-loading\">\n                            <div className=\"reddit-list__item-loading-title\" />\n                            <div className=\"reddit-list__item-loading-body\" />\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    }\n}\n\nRedditList.propTypes = {\n    subredditsList: PropTypes.array,\n    subredditTitle: PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Toolbox.scss\";\n\nexport default function ToolBox(props) {\n    const {\n        sortBy,\n        hasTimeInterval,\n        timeInterval,\n        changeSort,\n        changeTime,\n        searchQuery,\n        search,\n    } = props;\n\n    return (\n        <div className=\"toolbox\">\n            <div className=\"container toolbox__container\">\n                <input\n                    className=\"toolbox__search\"\n                    type=\"text\"\n                    value={searchQuery}\n                    onKeyPress={search}\n                    placeholder=\"Search a topic... \"\n                />\n\n                <div className=\"toolbox__sort-group\">\n                    <p>Sort</p>\n                    <select\n                        value={sortBy}\n                        onChange={changeSort}\n                        className=\"toolbox__sort\"\n                    >\n                        <option value=\"hot\">Hot</option>\n                        <option value=\"new\">New</option>\n                        <option value=\"controversial\">Controversial</option>\n                        <option value=\"top\">Top</option>\n                        <option value=\"rising\">Rising</option>\n                    </select>\n\n                    {hasTimeInterval && (\n                        <div className=\"toolbox__time-container\">\n                            <select\n                                value={timeInterval}\n                                onChange={changeTime}\n                                className=\"toolbox__time\"\n                            >\n                                <option value=\"hour\">Past Hour</option>\n                                <option value=\"day\">Past 24 Hours</option>\n                                <option value=\"week\">Past Week</option>\n                                <option value=\"month\">Past Month</option>\n                                <option value=\"year\">Past Year</option>\n                                <option value=\"all\">Of All Time</option>\n                            </select>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nToolBox.propTypes = {\n    sortBy: PropTypes.string.isRequired,\n    timeInterval: PropTypes.string.isRequired,\n    hasTimeInterval: PropTypes.bool.isRequired,\n    changeSort: PropTypes.func.isRequired,\n    searchQuery: PropTypes.func,\n    search: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nimport \"./Header.scss\";\n\nexport default function Header(props) {\n    const { subredditTitle } = props;\n\n    return (\n        <header className=\"header\">\n            <h1>\n                <span className=\"header__reddit\">Reddit</span> X{\" \"}\n                <span className=\"header__graphql\">GraphQL</span>\n            </h1>\n            <h2>\n                <a\n                    href={`http://www.reddit.com/r/${subredditTitle}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    r/{subredditTitle}\n                </a>\n            </h2>\n        </header>\n    );\n}\n","import React from \"react\";\n\nimport \"./ErrorPanel.scss\";\n\nexport default function ErrorPanel(props) {\n    const { error } = props;\n\n    return (\n        <div className=\"container\">\n            <div className=\"error-panel\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p>{error}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport RedditList from \"../redditList/RedditList.jsx\";\nimport ToolBox from \"../toolBox/ToolBox.jsx\";\nimport Header from \"../header/Header.jsx\";\nimport ErrorPanel from \"../errorPanel/ErrorPanel.jsx\";\n\nimport \"../../styles.scss\";\n\nimport \"./Home.scss\";\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            subreddits: null,\n            sortBy: \"new\",\n            timeInterval: \"day\",\n            searchQuery: \"javascript\",\n            hasTimeInterval: false,\n            error: null,\n        };\n\n        this.handleSortChange = this.handleSortChange.bind(this);\n        this.handleTimeIntervalChange = this.handleTimeIntervalChange.bind(\n            this\n        );\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    componentDidMount() {\n        this.getSubreddit();\n    }\n\n    /**\n     * gets subreddits from GraphQLHub\n     */\n    async getSubreddit() {\n        const {\n            sortBy,\n            searchQuery,\n            timeInterval,\n            hasTimeInterval,\n        } = this.state;\n        const sortByListings = `${sortBy}Listings`;\n        let timeIntervalProperty = \"\";\n\n        if (hasTimeInterval) {\n            timeIntervalProperty = `timeInterval: ${timeInterval}`;\n        }\n\n        const query = `{ reddit { subreddit(name: \"${searchQuery}\"){ ${sortByListings}(limit: 50, ${timeIntervalProperty}) { title author { username } url score numComments } } } }`;\n\n        this.setState({\n            error: null,\n        });\n\n        try {\n            const subreddits = await axios({\n                url: \"https://www.graphqlhub.com/graphql\",\n                method: \"get\",\n                params: {\n                    query,\n                },\n            });\n\n            this.setState({\n                subreddits:\n                    subreddits.data.data.reddit.subreddit[sortByListings],\n            });\n        } catch (err) {\n            this.setState({\n                error:\n                    \"Sorry, something went wrong or we can't find that subreddit. :(\",\n            });\n        }\n    }\n\n    /**\n     * resets subbredits list to null\n     */\n    resetSubreddit() {\n        this.setState({ subreddits: null });\n    }\n\n    /**\n     * handles search\n     * @param {object} event\t\tevent object\n     */\n    handleSearch(event) {\n        /* prevents white space input */\n        if (event.charCode === 32) {\n            // Space Key\n            event.preventDefault();\n        }\n\n        if (event.charCode === 13) {\n            // Enter Key\n            this.setState({ searchQuery: event.target.value }, () => {\n                this.resetSubreddit();\n                this.getSubreddit();\n            });\n        }\n    }\n\n    /**\n     * handles change in timeInterval in local state\n     * @param {object} event\t\tevent object\n     */\n    handleTimeIntervalChange(event) {\n        this.setState({ timeInterval: event.target.value }, () => {\n            this.resetSubreddit();\n            this.getSubreddit();\n        });\n    }\n\n    /**\n     * handles change in sorting order in local state\n     * @param {object} event\t\tevent object\n     */\n    handleSortChange(event) {\n        const targetValue = event.target.value;\n\n        if (targetValue === \"controversial\" || targetValue === \"top\") {\n            this.setState({\n                hasTimeInterval: true,\n            });\n        } else {\n            this.setState({\n                hasTimeInterval: false,\n            });\n        }\n\n        this.setState(\n            {\n                sortBy: targetValue,\n            },\n            () => {\n                this.resetSubreddit();\n                this.getSubreddit();\n            }\n        );\n    }\n\n    render() {\n        const {\n            subreddits,\n            searchQuery,\n            sortBy,\n            timeInterval,\n            hasTimeInterval,\n            error,\n        } = this.state;\n\n        return (\n            <div className=\"home\">\n                <Header subredditTitle={searchQuery} />\n\n                <ToolBox\n                    hasTimeInterval={hasTimeInterval}\n                    changeSort={this.handleSortChange}\n                    changeTime={this.handleTimeIntervalChange}\n                    search={this.handleSearch}\n                    sortBy={sortBy}\n                    timeInterval={timeInterval}\n                />\n\n                {error && <ErrorPanel error={error} />}\n\n                <div className=\"container home__container\">\n                    <RedditList\n                        subredditsList={subreddits}\n                        subredditTitle={searchQuery}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Home from \"./modules/home/Home\";\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact component={Home} path=\"/\" />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './routes';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { HashRouter } from 'react-router-dom';\n\nconst App = () => {\n\treturn (\n\t\t<HashRouter>\n\t\t\t<Routes />\n\t\t</HashRouter>\n\t)\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}